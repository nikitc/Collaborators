// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NetElementTestTask.Database;
using System;

namespace NetElementTestTask.Migrations
{
    [DbContext(typeof(CollaboratorContext))]
    [Migration("20180515133533_update_experience_v3")]
    partial class update_experience_v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetElementTestTask.Database.Entities.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("FirstName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("SecondName");

                    b.Property<string>("Sex");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Collaborators");
                });

            modelBuilder.Entity("NetElementTestTask.Database.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Floor");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NetElementTestTask.Database.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CollaboratorId");

                    b.Property<string>("ExpirienceDescription");

                    b.Property<int?>("ProgrammingLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId")
                        .IsUnique()
                        .HasFilter("[CollaboratorId] IS NOT NULL");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("NetElementTestTask.Database.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");
                });

            modelBuilder.Entity("NetElementTestTask.Database.Entities.Collaborator", b =>
                {
                    b.HasOne("NetElementTestTask.Database.Entities.Department", "Department")
                        .WithMany("Collaborators")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("NetElementTestTask.Database.Entities.Experience", b =>
                {
                    b.HasOne("NetElementTestTask.Database.Entities.Collaborator", "Collaborator")
                        .WithOne("Experience")
                        .HasForeignKey("NetElementTestTask.Database.Entities.Experience", "CollaboratorId");

                    b.HasOne("NetElementTestTask.Database.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Experiences")
                        .HasForeignKey("ProgrammingLanguageId");
                });
#pragma warning restore 612, 618
        }
    }
}
